/*
#include "UnityShaderVariables.cginc"
#include "GlobalResources.hlsl"
#include "Utils.hlsl"
#include "RayPayload.hlsl"

#pragma max_recursion_depth 1
#pragma enable_ray_tracing_shader_debug_symbols

// Input
float                           g_Zoom;
float                           g_AspectRatio;
uint                            g_ConvergenceStep;
uint                            g_FrameIndex;
TextureCube<float4>             g_EnvTex;
SamplerState                    sampler_g_EnvTex;

// Output
RWTexture2DArray<float4>        g_Radiance;

[RootSignature("RayGenerator.raytrace")]
void MarkRootSignature()
{}

[shader("raygeneration")]
void MainRayGenShader()
{ 
    uint2 launchIndex = uint2(DispatchRaysIndex().x, DispatchRaysDimensions().y - DispatchRaysIndex().y - 1);
    uint2 launchDim = DispatchRaysDimensions().xy;

    // Shoot rays through the center of a pixel (plus a jitter).
    float2 frameCoord = launchIndex + float2(0.5, 0.5);

    // Initial random number generator seed for this pixel. The rngState will change every time we draw a random number.
    uint rngState = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(g_ConvergenceStep + g_FrameIndex) * uint(26699)) | uint(1);
   
    float2 jitter = float2(RandomFloat01(rngState), RandomFloat01(rngState)) - float2(0.5, 0.5);

    float2 ndcCoords = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);
        
    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    // Get a ray in view space.
    float3 viewDirection = normalize(float3(ndcCoords.x * g_AspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);

    uint missShaderIndex = 0;
    
    RayDesc ray;
    ray.Origin      = _WorldSpaceCameraPos;
    ray.Direction   = rayDirection;
    ray.TMin        = 0;
    ray.TMax        = K_T_MAX;
              
    RayPayload payload;
    payload.albedo                  = float3(1, 1, 1);
    payload.emission                = float3(0, 0, 0);
    payload.rngState                = rngState;
    payload.bounceIndexOpaque       = 0;
    payload.bounceIndexTransparent  = 0;
    payload.bounceRayOrigin         = float3(0, 0, 0);
    payload.bounceRayDirection      = float3(0, 0, 0);
    payload.k                       = 1;

    // Safe net for when shaders have compilation errors and don't increase the bounce index, resulting in an infinite loop.
    uint safeNet = 0;

    float3 radiance = float3(0, 0, 0);
    float3 throughput = float3(1, 1, 1);
        
    do
    {
        TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

        radiance += payload.emission * throughput;

        throughput *= payload.albedo / max(0.001, payload.k);

        float pathStopProbability = 1;

#define ENABLE_RUSSIAN_ROULETTE 1

#if ENABLE_RUSSIAN_ROULETTE
        pathStopProbability = max(throughput.r, max(throughput.g, throughput.b));

        // Dark colors have higher chance to terminate the path early.
        if (pathStopProbability < RandomFloat01(payload.rngState))
            break;
#endif

        throughput *= 1 / pathStopProbability;

        ray.Origin      = payload.bounceRayOrigin;
        ray.Direction   = payload.bounceRayDirection;
    }
    while ((payload.bounceIndexOpaque <= g_BounceCountOpaque) && (payload.bounceIndexTransparent <= g_BounceCountTransparent) && (++safeNet < 1000));

    uint3 ix = uint3(launchIndex.x, launchIndex.y, 0);
    float3 prevRadiance = g_Radiance[ix].xyz;

    float3 result = lerp(prevRadiance, radiance, 1 / float(g_ConvergenceStep + 1));

    g_Radiance[ix] = float4(result * 1.0, 1);
}

[shader("miss")]
void MainMissShader0(inout RayPayload payload : SV_RayPayload)
{
    float3 wdir = WorldRayDirection();
    float4 dir = float4(wdir.x, wdir.y, wdir.z, 0);
    payload.emission                = g_EnvTex.SampleLevel(sampler_g_EnvTex, wdir, 0).xyz;
    payload.bounceIndexOpaque       = -1;
}
*/
#include "UnityShaderVariables.cginc"
#include "GlobalResources.hlsl"
#include "Utils.hlsl"
#include "RayPayload.hlsl"

#pragma max_recursion_depth 1
#pragma enable_ray_tracing_shader_debug_symbols

RaytracingAccelerationStructure accelStructure : register(t0, space0);
RWTexture2DArray<float4> outTexture : register(u0, space0);
float3 cameraPos;
matrix cameraMat;

[shader("raygeneration")]
void MainRayGen()
{
    uint uavW;
    uint uavH;
    uint uavD;
    outTexture.GetDimensions(uavW, uavH, uavD);
    
    uint2 rayIndex = DispatchRaysIndex().xy;
    
    if ( rayIndex.x < uavW && rayIndex.y < uavH )
    {
        uint2 rayDimensions = (float2)DispatchRaysDimensions();
        
        RayDesc r;
        r.Origin = cameraPos;
        r.Direction = mul(cameraMat, float4( float2(rayIndex)/float2(rayDimensions) * 2.0 - 1.0, -1.0, 0.0 ));
        r.Direction.y *= 1.0;
        r.TMin = 0.04;
        r.TMax = 100.0;
        
        RayPayload payload;
        payload.color = float4(1.0, 0, 1.0, 0);
        
        uint instanceMask = 255;
        uint rayContribToHG = 0;
        uint geomMultiplier = 1;
        uint missShaderIndex = 0;
        TraceRay(accelStructure,
                 RAY_FLAG_NONE,
                 instanceMask,
                 rayContribToHG,
                 geomMultiplier,
                 missShaderIndex,
                 r,
                 payload);
        
        uint3 rayIndex3d = uint3(rayIndex.xy, 0);
        outTexture[rayIndex3d] = payload.color;
    }
}

[shader("miss")]
void MainMiss(inout RayPayload payload)
{
    payload.color = float4(0.3, 0.3, 0.3, 0);
}
